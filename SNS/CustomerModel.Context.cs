//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SNS
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CustomerTBLEntities : DbContext
    {
        public CustomerTBLEntities()
            : base("name=CustomerTBLEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CustomerAddress> CustomerAddresses { get; set; }
        public virtual DbSet<CustomerInfo> CustomerInfoes { get; set; }
        public virtual DbSet<CustomerPhoneNumber> CustomerPhoneNumbers { get; set; }
    
        public virtual int InsertCustomerIntoCustomerInfo(string fName, string mName, string lName, string customerEmail, string address, string city, string state, Nullable<int> zip, string phoneNumberExt, string phoneNumberSeven)
        {
            var fNameParameter = fName != null ?
                new ObjectParameter("FName", fName) :
                new ObjectParameter("FName", typeof(string));
    
            var mNameParameter = mName != null ?
                new ObjectParameter("MName", mName) :
                new ObjectParameter("MName", typeof(string));
    
            var lNameParameter = lName != null ?
                new ObjectParameter("LName", lName) :
                new ObjectParameter("LName", typeof(string));
    
            var customerEmailParameter = customerEmail != null ?
                new ObjectParameter("CustomerEmail", customerEmail) :
                new ObjectParameter("CustomerEmail", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipParameter = zip.HasValue ?
                new ObjectParameter("Zip", zip) :
                new ObjectParameter("Zip", typeof(int));
    
            var phoneNumberExtParameter = phoneNumberExt != null ?
                new ObjectParameter("PhoneNumberExt", phoneNumberExt) :
                new ObjectParameter("PhoneNumberExt", typeof(string));
    
            var phoneNumberSevenParameter = phoneNumberSeven != null ?
                new ObjectParameter("PhoneNumberSeven", phoneNumberSeven) :
                new ObjectParameter("PhoneNumberSeven", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCustomerIntoCustomerInfo", fNameParameter, mNameParameter, lNameParameter, customerEmailParameter, addressParameter, cityParameter, stateParameter, zipParameter, phoneNumberExtParameter, phoneNumberSevenParameter);
        }
    }
}
